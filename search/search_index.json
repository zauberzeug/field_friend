{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Zauberzeug Field Friend is an autonomous, mobile, and AI-driven agricultural robot developed by Zauberzeug GmbH. The robot is specifically designed for autonomous actions, combining lightness, flexibility, and robustness to efficiently handle a variety of outdoor tasks. Equipped with advanced sensor technologies and camera systems, the Field Friend can precisely determine its position, follow crop lines and detect various kinds of plants. With it's modular design, the Field Friend can be extended with various tools and sensors to fit the specific needs of the use case.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>The Open Source software encourages you to modify and enhance the behavior and adapt it to your specific needs.</li> <li>The Modular Design allows equipping with tools from Zauberzeug as well as third-party solutions or your own developments.</li> <li>Advanced Sensing and Autonomy-Algorithms allows autonomous navigation and obstacle avoidance.</li> <li>Full control via web interface remote and locally via WiFi.</li> <li>Manual steering with touch-joystick and keyboard or App.</li> <li>A combined camera/motor calibration for real world coordinate system (unit: meters)</li> <li>...</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We're thrilled that you're interested in contributing to the Field Friend source code! Here are some guidelines that will help you get started.</p>"},{"location":"contributing/#reporting-issues","title":"Reporting issues","text":"<p>If you encounter a bug or other issue, the best way to report it is by opening a new issue on our GitHub repository. When creating the issue, please provide a clear and concise description of the problem, including any relevant error messages and code snippets. If possible, include steps to reproduce the issue.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We follow a Code of Conduct to ensure that everyone who participates in the NiceGUI community feels welcome and safe. By participating, you agree to abide by its terms.</p>"},{"location":"contributing/#contributing-code","title":"Contributing code","text":"<p>We are excited that you want to contribute code to the Field Friend source code. We're always looking for bug fixes, performance improvements, and new features.</p>"},{"location":"contributing/#coding-style-guide","title":"Coding Style Guide","text":""},{"location":"contributing/#formatting","title":"Formatting","text":"<p>We use autopep8 with a 120 character line length to format our code. Before submitting a pull request, please run</p> <pre><code>autopep8 --max-line-length=120 --in-place --recursive .\n</code></pre> <p>on your code to ensure that it meets our formatting guidelines. Alternatively you can use VSCode, open the field_friend.code-workspace file and install the recommended extensions. Then the formatting rules are applied whenever you save a file.</p> <p>In our point of view, the Black formatter is sometimes a bit too strict. There are cases where one or the other arrangement of, e.g., function arguments is more readable than the other. Then we like the flexibility to either put all arguments on separate lines or only put the lengthy event handler on a second line and leave the other arguments as they are.</p>"},{"location":"contributing/#imports","title":"Imports","text":"<p>We use ruff to automatically sort imports:</p> <pre><code>ruff check . --fix\n</code></pre>"},{"location":"contributing/#single-vs-double-quotes","title":"Single vs Double Quotes","text":"<p>Regarding single or double quotes: PEP 8 doesn't give any recommendation, so we simply chose single quotes and sticked with it. On qwerty keyboards it's a bit easier to type, is visually less cluttered, and it works well for strings containing double quotes from the English language.</p>"},{"location":"contributing/#f-strings","title":"F-Strings","text":"<p>We use f-strings where ever possible because they are generally more readable - once you get used to them. There are only a few places in the code base where performance really matters and f-strings might not be the best choice. These places should be marked with a <code># NOTE: ...</code> comment when diverging from f-string usage.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#formatting_1","title":"Formatting","text":"<p>Because it has numerous benefits we write each sentence in a new line.</p>"},{"location":"contributing/#examples","title":"Examples","text":"<p>Each example should be about one concept. Please try to make them as minimal as possible to show what is needed to get some kind of functionality. We are happy to merge pull requests with new examples which show new concepts, ideas or interesting use cases.</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>To get started, fork the repository on GitHub, clone it somewhere on your filesystem, commit and push your changes, and then open a pull request (PR) with a detailed description of the changes you've made (the PR button is shown on the GitHub website of your forked repository).</p> <p>When submitting a PR, please make sure that the code follows the existing coding style and that all tests are passing. If you're adding a new feature, please include tests that cover the new functionality.</p>"},{"location":"contributing/#thank-you","title":"Thank you!","text":"<p>Thank you for your interest in contributing. We're looking forward to work with you!</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#run-in-simulation","title":"Run in Simulation","text":"<p>We suggest you begin with simulating the Field Friend on your local development machine. The software is meant to run on Linux and Unix systems so if you are using Windows, consider running in a Docker container or virtual machine.</p> <p>Just execute the following commands:</p> <pre><code>git clone git@github.com:zauberzeug/field_friend.git\ncd field_friend\npython3 -m pip install -r requirements.txt\n./main.py\n</code></pre> <p>This will open the user interface of a simulated robot in your browser. If you change some code, the simulation will automatically reload. The Field Friend code is based on RoSys which itself uses NiceGUI, both having a very gentle learning curve and are designed to boost your rapid development and testing.</p>"},{"location":"getting_started/#run-on-real-hardware","title":"Run on Real Hardware","text":"<p>The following instructions will only work if you have a real Zauberzeug Field Friend at your disposal. Contact sales@zauberzeug.com if you are interested in purchasing this robot.</p>"},{"location":"getting_started/#setup","title":"Setup","text":"<ol> <li>ensure you can login via ssh without providing a password (via <code>ssh-copy-id</code> command)</li> <li>ensure you have LiveSync installed with  <code>python3 -m pip install livesync</code></li> <li>ensure the latest version of the docker image is installed on the Field Friend by syncing the code as described below and then running  <code>./docker.sh uppull</code></li> <li>Optional: ensure the correct docker containers are loaded on startup by running  <code>./docker.sh stopall &amp;&amp; ./docker.sh uppull &amp;&amp; ./docker.sh install</code></li> <li>Optional: update the Lizard microcontroller firmware on your Robot Brain by accessing the Field Friend web interface and navigating to the \"Developer\" options</li> </ol>"},{"location":"getting_started/#deploy-and-change-code","title":"Deploy and Change Code","text":"<ol> <li>go to your local <code>field_friend</code> folder and start the LiveSync script:  <code>./sync.py &lt;ssh-host-name-of-field-friend&gt;</code></li> <li>this will deploy your local code to the Field Friend</li> <li>as long as LiveSync is active, all code change are automatically pushed to the machine</li> <li>any code changes will automatically trigger a reload on the Field Friend</li> </ol>"},{"location":"getting_started/#update-rosys-and-nicegui","title":"Update RoSys and NiceGUI","text":"<p>To utilize personal versions of RoSys and NiceGUI instead of the default ones provided in the docker image, modify the <code>sync.py</code> file by uncommenting the specific folders.</p>"},{"location":"getting_started/#logs","title":"Logs","text":"<p>You can see the current log with</p> <pre><code>./docker.sh l rosys\n</code></pre> <p>The history of logs can be seen with</p> <pre><code>less -r ~/.rosys/debug.log\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#asyncio-warning","title":"Asyncio Warning","text":"<p>While running RoSys you may see warnings similar to this one:</p> <pre><code>2021-10-31 15:08:04.040 [WARNING] asyncio: Executing &lt;Task pending name='Task-255' coro=&lt;handle_event() running at /usr/local/lib/python3.9/site-packages/justpy/justpy.py:344&gt; wait_for=&lt;_GatheringFuture pending cb=[&lt;TaskWakeupMethWrapper object at 0x7f7001f8e0&gt;()] created at /usr/local/lib/python3.9/asyncio/tasks.py:705&gt; created at /usr/local/lib/python3.9/site-packages/justpy/justpy.py:261&gt; took 0.238 seconds\n</code></pre> <p>This means some coroutine is clogging the event loop for too long. In the above example it is a whopping 238 ms in which no other actor can do anything. This is an eternity when machine communication is expected to happen about every 10 ms. The warning also provides a (not so readable) hint where the time is consumed.</p> <p>The example above is one of the more frequent scenarios. It means some code inside a user interaction event handler (e.g. <code>handle_event()</code> in <code>justpy.py</code>) is blocking. Try to figure out which UI event code is responsible by commenting out parts of your logic and try to reproduce the warning systematically.</p>"},{"location":"features/field_planner/","title":"Field Planner","text":"<p>The Field Planner is a tool to create and manage fields and routes for the Field Friend.</p>"},{"location":"features/user_interface/","title":"User Interface","text":"<p>The Field Friend user interface is a web application build with NiceGUI. This allows you to control the robot via the local \"Feldfreund\" WiFi hotspot or remotely via NiceGUI On Air.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>hardware</li> </ul>"},{"location":"reference/field_friend/hardware/","title":"hardware","text":""},{"location":"reference/field_friend/hardware/#field_friend.hardware.DoubleWheelsHardware","title":"DoubleWheelsHardware","text":"<pre><code>DoubleWheelsHardware(\n    robot_brain: rosys.hardware.RobotBrain,\n    *,\n    can: rosys.hardware.CanHardware,\n    name: str = \"wheels\",\n    left_back_can_address: int = 0,\n    left_front_can_address: int = 256,\n    right_back_can_address: int = 512,\n    right_front_can_address: int = 768,\n    m_per_tick: float = 0.01,\n    width: float = 0.5,\n    is_left_reversed: bool = False,\n    is_right_reversed: bool = False,\n    odrive_version: int = 4\n)\n</code></pre> <p>               Bases: <code>Wheels</code>, <code>ModuleHardware</code></p> <p>This module implements wheels hardware.</p> <p>Drive and stop commands are forwarded to a given Robot Brain. Velocities are read and emitted regularly.</p>"},{"location":"reference/field_friend/hardware/#field_friend.hardware.MowerHardware","title":"MowerHardware","text":"<pre><code>MowerHardware(\n    robot_brain: rosys.hardware.RobotBrain,\n    *,\n    can: rosys.hardware.CanHardware,\n    m0_can_address: int = 0,\n    m1_can_address: int = 256,\n    m2_can_address: int = 512,\n    m_per_tick: float = 0.01,\n    speed: float = 0.0,\n    is_m0_reversed: bool = False,\n    is_m1_reversed: bool = False,\n    is_m2_reversed: bool = False,\n    odrive_version: int = 4,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Mower</code>, <code>ModuleHardware</code></p> <p>This module implements extrernal mower hardware.</p> <p>on and off commands are forwarded to a given Robot Brain.</p>"},{"location":"reference/field_friend/hardware/#field_friend.hardware.TornadoHardware","title":"TornadoHardware","text":"<pre><code>TornadoHardware(\n    robot_brain: rosys.hardware.RobotBrain,\n    *,\n    name: str = \"tornado\",\n    can: rosys.hardware.CanHardware,\n    expander: rosys.hardware.ExpanderHardware | None,\n    min_position: float,\n    z_can_address: int = 1024,\n    turn_can_address: int = 1280,\n    m_per_tick: float = 0.01,\n    end_top_pin: int = 32,\n    end_top_pin_expander: bool = False,\n    end_bottom_pin: int = 5,\n    end_bottom_pin_expander: bool = False,\n    ref_motor_pin: int = 33,\n    ref_motor_pin_expander: bool = False,\n    ref_gear_pin: int = 4,\n    ref_gear_pin_expander: bool = False,\n    ref_knife_stop_pin: int = 35,\n    ref_knife_stop_pin_expander: bool = False,\n    ref_knife_ground_pin: int = 18,\n    ref_knife_ground_pin_expander: bool = False,\n    motors_on_expander: bool = False,\n    end_stops_on_expander: bool = True,\n    is_z_reversed: bool = False,\n    is_turn_reversed: bool = False,\n    speed_limit: int = 1,\n    turn_speed_limit: int = 1,\n    current_limit: int = 20,\n    z_reference_speed: float = 0.0075,\n    turn_reference_speed: float = 0.25,\n    odrive_version: int = 4\n)\n</code></pre> <p>               Bases: <code>Tornado</code>, <code>ModuleHardware</code></p> <p>The z axis module is a simple example for a representation of real or simulated robot hardware.</p>"},{"location":"reference/field_friend/hardware/#field_friend.hardware.YAxisCanOpenHardware","title":"YAxisCanOpenHardware","text":"<pre><code>YAxisCanOpenHardware(\n    robot_brain: rosys.hardware.RobotBrain,\n    *,\n    name: str = \"yaxis\",\n    can: rosys.hardware.CanHardware,\n    expander: rosys.hardware.ExpanderHardware | None,\n    can_address: int = 96,\n    max_speed: int = 2000,\n    reference_speed: int = 40,\n    min_position: float = -0.068,\n    max_position: float = 0.068,\n    axis_offset: float = 0.075,\n    steps_per_m: float = 1481481.48,\n    end_r_pin: int = 19,\n    end_l_pin: int = 21,\n    motor_on_expander: bool = False,\n    end_stops_on_expander: bool = True,\n    end_stops_inverted: bool = False,\n    reversed_direction: bool = False\n)\n</code></pre> <p>               Bases: <code>Axis</code>, <code>ModuleHardware</code></p> <p>The y axis hardware module is a simple example for a representation of real robot hardware.</p>"},{"location":"reference/field_friend/hardware/#field_friend.hardware.ZAxisCanOpenHardware","title":"ZAxisCanOpenHardware","text":"<pre><code>ZAxisCanOpenHardware(\n    robot_brain: rosys.hardware.RobotBrain,\n    *,\n    name: str = \"zaxis\",\n    can: rosys.hardware.CanHardware,\n    expander: rosys.hardware.ExpanderHardware | None,\n    can_address: int = 96,\n    max_speed: int = 2000,\n    reference_speed: int = 40,\n    min_position: float = -0.15,\n    max_position: float = 0.0,\n    axis_offset: float = 0.0,\n    steps_per_m: float = 1481481.48,\n    end_t_pin: int = 19,\n    end_b_pin: int = 21,\n    motor_on_expander: bool = False,\n    end_stops_on_expander: bool = True,\n    end_stops_inverted: bool = False,\n    reversed_direction: bool = False\n)\n</code></pre> <p>               Bases: <code>Axis</code>, <code>ModuleHardware</code></p> <p>The z axis hardware module is a simple example for a representation of real robot hardware.</p>"}]}